# -*- coding: utf-8 -*-
"""True-fake1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C2L3pUZg9TNU4YKvik5ufLl_caBZzqdL
"""

import pandas as pd
import numpy as np

true = pd.read_csv('True.csv')

fake = pd.read_csv('Fake.csv')

true.head()

fake.head()

true['label'] = 1
fake['label'] = 0

news = pd.concat([true, fake], axis=0)

news.head()

news.tail()

news.isnull().sum()

news= news.drop(['title', 'subject'], axis=1)

news.head()

news = news.sample(frac=1)

news.reset_index(inplace=True)

news.head()

news.drop(['index'], axis=1, inplace=True)

news.head()

import re

def wordopt(text):
  text = text.lower()
  text = re.sub('\[.*?\]', '', text)
  text = re.sub("\\W", " ", text)
  text = re.sub('https?://\S+|www\.\S+', '', text)
  return text

news['text'] = news['text'].apply(wordopt)

x = news['text']
y = news['label']

y

x

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)

x_train.shape

x_test.shape

from sklearn.feature_extraction.text import TfidfVectorizer

vectorization = TfidfVectorizer()

xv_train = vectorization.fit_transform(x_train)

xv_test= vectorization.transform(x_test)

xv_train

xv_test

from sklearn.linear_model import LogisticRegression

LR = LogisticRegression()

LR.fit(xv_train, y_train)

pred_lr = LR.predict(xv_test)

LR.score(xv_test, y_test)

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report

DTC = DecisionTreeClassifier()

DTC.fit(xv_train, y_train)

pred_dtc = DTC.predict(xv_test)

DTC.score(xv_test, y_test)

print(classification_report(y_test, pred_dtc))

from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier()

rfc.fit(xv_train, y_train)

predict_rfc = rfc.predict(xv_test)

rfc.score(xv_test, y_test)

print(classification_report(y_test, predict_rfc))

from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import classification_report

gbc= GradientBoostingClassifier()

gbc.fit(xv_train, y_train)

pred_gbc = gbc.predict(xv_test)

gbc.score(xv_test, y_test)

print(classification_report(y_test, predict_gbc))

def output_lable(n):
  if n == 0:
    return "Fake News"
  elif n == 1:
    return "Not A Fake News"

